#!/usr/bin/env ruby

#
# script to get your github newsfeed
#

require 'rubygems'
require 'json'
begin
  require 'faraday'
rescue LoadError
  abort "this command needs the faraday gem installed"
end
begin
  require 'time-lord'
rescue LoadError
  abort "this command needs the time-lord gem installed"
end

# colors
want_color = `git config color.wtf`
want_color = `git config color.ui` if want_color.empty?
$color = case want_color.chomp
    when "true"; true
    when "auto"; $stdout.tty?
end

def red s; $color ? "\033[31m#{s}\033[0m" : s end
def green s; $color ? "\033[32m#{s}\033[0m" : s end
def yellow s; $color ? "\033[33m#{s}\033[0m" : s end
def cyan s; $color ? "\033[36m#{s}\033[0m" : s end
def grey s; $color ? "\033[1;30m#{s}\033[0m" : s end
def purple s; $color ? "\033[35m#{s}\033[0m" : s end

def get_github_newsfeed(info, host="https://api.github.com",
                             pathbase="/users")
    conn = Faraday.new(:url => host)
    path = "#{pathbase}/#{info[:user]}/received_events"
    res = conn.get do |req|
        req.url path
        req.headers['Authorization'] = "token #{info[:token]}"
    end
    res = JSON.parse(res.body)
end

def format_events(events)
  events.each do |event|
    time = Time.parse(event["created_at"])
    case event["type"]
      when "CommitCommentEvent"
        message = "#{red(event["actor"]["login"])} commented on #{green(event["repo"]["name"] + "#")}#{green(event["payload"]["comment"]["url"].split("/")[-1])}"
      when "CreateEvent"
        type = event["payload"]["ref_type"]
        ref  = event["payload"]["ref"]
        text = "created #{cyan(type)}"
        extra = type == "repository" ? "" : "#{yellow(ref)} on "
        message = "#{red(event["actor"]["login"])} #{text} #{extra}#{green(event["repo"]["name"])}"
      when "DeleteEvent"
        type = event["payload"]["ref_type"]
        ref  = event["payload"]["ref"]
        text = "deleted #{cyan(type)}"
        extra = type == "repository" ? "" : "#{yellow(ref)} on "
        message = "#{red(event["actor"]["login"])} #{text} #{extra}#{green(event["repo"]["name"])}"
      when "DownloadEvent"
        message = "#{red(event["actor"]["login"])} added download #{cyan(event["payload"]["download"]["name"])} to #{green(event["repo"]["name"])}"
      when "FollowEvent"
        message = "#{red(event["actor"]["login"])} started following #{green(event["payload"]["target"]["login"])}"
      when "ForkEvent"
        message = "#{red(event["actor"]["login"])} forked #{yellow(event["repo"]["name"])} to #{green(event["payload"]["forkee"]["full_name"])}"
      when "ForkApplyEvent"
      when "GistEvent"
        message = "#{red(event["actor"]["login"])} #{cyan(event["payload"]["action"])} gist #{green(event["payload"]["gist"]["html_url"])}"
      when "GollumEvent"
      when "IssueCommentEvent"
        message = "#{red(event["actor"]["login"])} commented on #{green(event["repo"]["name"] + "#")}#{green(event["payload"]["issue"]["url"].split("/")[-1])}"
      when "IssuesEvent"
        message = "#{red(event["actor"]["login"])} #{cyan(event["payload"]["action"])} issue #{green(event["repo"]["name"] + "#")}#{green(event["payload"]["issue"]["url"].split("/")[-1])}"
      when "MemberEvent"
        message = "#{red(event["actor"]["login"])} added #{cyan(event["payload"]["member"]["login"])} to #{green(event["repo"]["name"])}"
      when "PublicEvent"
        message = "#{red(event["actor"]["login"])} open sourced #{green(event["repo"]["name"])}"
      when "PullRequestEvent"
        message = "#{red(event["actor"]["login"])} #{cyan(event["payload"]["action"])} pull request #{green(event["repo"]["name"] + "#")}#{green(event["payload"]["number"])}"
      when "PullRequestReviewCommentEvent"
        message = "#{red(event["actor"]["login"])} commented on #{green(event["repo"]["name"] + "#")}#{green(event["payload"]["issue"]["url"].split("/")[-1])}"
      when "PushEvent"
        message = "#{red(event["actor"]["login"])} pushed to #{cyan(event["payload"]["ref"].split("/")[-1])} at #{green(event["repo"]["name"])}"
      when "TeamAddEvent"
      when "WatchEvent"
        message = "#{red(event["actor"]["login"])} starred #{green(event["repo"]["name"])}"
      else
    end
    puts message + " #{purple(time.ago.to_words)}"
  end
end

def get_userinfo_from_gitconfig(enterprise=false)
    sfx = enterprise ? "-enterprise" : ""
    token = `git config github#{sfx}.token`.gsub("\n", "")
    user  = `git config github#{sfx}.user`.gsub("\n", "")
    {:user => user, :token => token}
end

notifications = get_github_newsfeed(get_userinfo_from_gitconfig)
format_events(notifications)
